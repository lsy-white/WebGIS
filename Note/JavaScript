JavaScript 不简单
  概述————
    是一种轻量级的编程语言；
    与Java不同，是另外一套完整的语言；
    是一种通用语言：（是一个完整的语言，有自己设计的框架和思路）
        客户端
        其他环境下
  代码特点————
    使用UTF-8编码（可嵌入汉语）
    大小写敏感
    忽略多余的空格、tab和换行（*代码易读）
    每句结束用分句，但一句代码当
    注释：
    可使静态网页变为动态网页
    Literals Data: 可直接出现在代码中的数值
    Identifiers：用于命名变量、函数、或为循环代码设置标签
  
  数据类型—————
    基本类型
          Numbers
            十进制、十六进制0x,八进制0
            +-*/
            math对象，
            
          strings  【JS中，是不可修改的】
            “”  ‘’
            \ 转义字符
            + 连接
            .length 
            函数——substring(1,4),indexOf(),charAt(s.length-1)
            根据上下文自动转换————
                数字转字符串
                字符串转数字；
                
           Boolen
            True,False
            if(a==4)
            根据上下文转换
              在数字上下文时，true=1，false=0
              在字符串~时，
             数字用于逻辑上下文时，
             字符串用于逻辑上下文时，
     Object对象  
           Functions （！！）
                一段可执行的js代码；
                定义一次，多次调用；
                定义时设置参数，调用时为参数传递值，函数依据参数进行；
                编译器预定义函数，用户自定义函数
                function square(x)
                {
                  return x*x;
                }
                JavaSript中，函数是变量值，可被存储为变量、数组和对象中，也可被作为参数传递。（灵活性，复杂性，<回调函数>）
                其他定义方法。
           objects 【无序，利用属性名取值】
              是一系列命名量的集合。
              object可被用作数组，用属性名取值。
              函数作为object属性值时，叫做对象的方法。
              灵活性增加了复杂度。属性随用随加。
              ……
            Arrays 【排序，利用下标取值】
                数值的集合，序号从0开始。
                数组中可包含任意一种数据类型，
                同一数组中的对象不需要是同一类型；
                Array创建
                字面量定义 ？？
            null 定义了，值为空
            undefined 尚未定义，无值。
                ==，是js里的
                === 【同java】为了与强类型语言结合。
            Data
            Regular Expressions
      
      JavaScript数据类型自动转换，可能带来意想不到的错误。
      
      基本类型包装对象  【定义的一种机制】---可解释--->（虽然定义了一个string，但它竟然有length属性）
          可显式显示。
          编译器给我们做了更多的工作时，我们能更方便，但若不了解内在机制，则无法完成自己想要的效果，且不懂。
      传值？传引用？  【永远是学一门语言的核心】
          JavaScript中，基本类型传值（string较为特殊，immutable），object对象传引用。          
      
          
      
    
  
